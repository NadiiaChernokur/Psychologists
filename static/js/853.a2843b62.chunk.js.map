{"version":3,"file":"static/js/853.a2843b62.chunk.js","mappings":"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","sources":["Card/Card.js","PsychologistsList/PsychologistsList.styled.js","PsychologistsList/PsychologistsList.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport {\n  About,\n  CardImg,\n  CardInformation,\n  Experience,\n  ExperienceContainer,\n  ExperienceDiv,\n  ExperienceSpan,\n  FavButton,\n  List,\n  Name,\n  Online,\n  OnlineD,\n  Price,\n  PriceSpan,\n  PsychP,\n  Rating,\n  RatingDiv,\n  RatingP,\n  ReadMe,\n  UlList,\n} from './Card.styled';\nimport ReadMeButton from './ReadMe';\nimport sprite from '../sprite.svg';\nimport { useDispatch } from 'react-redux';\nimport {\n  addFavorite,\n  getUserToToken,\n  removeFavoriteItem,\n} from '../redux/operetion';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Card = ({ array }) => {\n  const dispatch = useDispatch();\n  const [clicks, setClicks] = useState({});\n  const [favorites, setFavorites] = useState([]);\n  // const [userExist, setUserExist] = useState(false);\n  // const isError = useSelector((state) => state.isUserExist);\n  // console.log(isError);\n  // useEffect(() => {\n  //   if (isError === null) {\n  //     setUserExist(true);\n  //   }\n  // }, [isError, userExist]);\n\n  useEffect(() => {\n    const getToken = JSON.parse(localStorage.getItem('tokenPsych'));\n\n    if (getToken === null || getToken.length === 0) {\n      return;\n      // const value = await dispatch(getUserToToken(getToken));\n      // console.log(value.payload);\n    }\n\n    const storedFavorites =\n      JSON.parse(localStorage.getItem('favoritesPsych')) || [];\n    setFavorites(storedFavorites);\n  }, []);\n\n  const handleClick = index => {\n    setClicks(prevClicks => ({\n      ...prevClicks,\n      [index]: !prevClicks[index],\n    }));\n  };\n  const addToFavorite = async name => {\n    const getToken = JSON.parse(localStorage.getItem('tokenPsych'));\n\n    if (getToken && getToken.length !== 0) {\n      const value = await dispatch(getUserToToken(getToken));\n      console.log(value.payload);\n      if (\n        value.payload === 'This service is available only to registered users'\n      ) {\n        toast(value.payload);\n        return;\n      }\n    } else {\n      toast('This service is available only to registered users');\n      return;\n    }\n\n    const updatedFavorites = [...favorites];\n    const index = updatedFavorites.indexOf(name);\n\n    if (index !== -1) {\n      updatedFavorites.splice(index, 1);\n      dispatch(removeFavoriteItem(name));\n    } else {\n      updatedFavorites.push(name);\n      dispatch(addFavorite(name));\n    }\n    setFavorites(updatedFavorites);\n    localStorage.setItem('favoritesPsych', JSON.stringify(updatedFavorites));\n  };\n  const isFavorite = PName => {\n    return favorites.includes(PName);\n  };\n  return (\n    <>\n      <ToastContainer toastStyle={{ background: '#fc0317', color: 'white' }} />\n\n      <UlList>\n        {array.map((el, index) => (\n          <List key={el.name}>\n            <OnlineD>\n              <Online width=\"14\" height=\"14\">\n                <use href={`${sprite}#Group`}></use>\n              </Online>\n              <CardImg src={el.avatar_url} alt={el.name}></CardImg>\n            </OnlineD>\n            <CardInformation>\n              <Rating>\n                <PsychP>Psychologist</PsychP>\n                <RatingDiv>\n                  <svg width=\"16\" height=\"16\">\n                    <use href={`${sprite}#star`}></use>\n                  </svg>\n                  <RatingP>Rating: {el.rating}</RatingP>\n                  <Price>\n                    Price / 1 hour:<PriceSpan> {el.price_per_hour}$</PriceSpan>\n                  </Price>\n                  <FavButton onClick={() => addToFavorite(el.name)}>\n                    {isFavorite(el.name) ? (\n                      <svg width=\"26\" height=\"26\">\n                        <use href={`${sprite}#hart`}></use>\n                      </svg>\n                    ) : (\n                      <svg width=\"26\" height=\"26\">\n                        <use href={`${sprite}#hartoff`}></use>\n                      </svg>\n                    )}\n                  </FavButton>\n                </RatingDiv>\n              </Rating>\n              <Name>{el.name}</Name>\n              <ExperienceDiv>\n                <ExperienceContainer>\n                  <Experience>\n                    Experience: <ExperienceSpan>{el.experience}</ExperienceSpan>\n                  </Experience>\n                  <Experience>\n                    License:\n                    <ExperienceSpan> {el.license}</ExperienceSpan>\n                  </Experience>\n                </ExperienceContainer>\n                <ExperienceContainer>\n                  <Experience>\n                    Specialization:\n                    <ExperienceSpan> {el.specialization}</ExperienceSpan>\n                  </Experience>\n                  <Experience>\n                    Initial_consultation:\n                    <ExperienceSpan> {el.initial_consultation}</ExperienceSpan>\n                  </Experience>\n                </ExperienceContainer>\n              </ExperienceDiv>\n              <About>{el.about}</About>\n              {!clicks[index] && (\n                <ReadMe onClick={() => handleClick(index)}>Read more</ReadMe>\n              )}\n\n              {clicks[index] && <ReadMeButton array={el.reviews} doctor={el} />}\n            </CardInformation>\n          </List>\n        ))}\n      </UlList>\n    </>\n  );\n};\nexport default Card;\n","import styled from 'styled-components';\nexport const Container = styled.div`\n  margin: auto;\n  max-width: 1204px;\n  padding: 64px 20px;\n  height: 110%;\n  display: flex;\n  flex-direction: column;\n  @media screen and (max-width: 768px) {\n    padding: 32px 20px;\n    min-width: 636px;\n  }\n`;\n\nexport const PsychologistsListSelect = styled.select`\n  width: 226px;\n  border-radius: 14px;\n  padding: 16px 18px;\n  background: #54be96;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 125%;\n  color: #fbfbfb;\n  margin-bottom: 32px;\n  @media screen and (max-width: 480px) {\n    width: 310px;\n    font-size: 30px;\n  }\n`;\nexport const PsychologistsListButton = styled.button`\n  border-radius: 30px;\n  padding: 14px 48px;\n  /* width: 176px; */\n  margin: 64px auto;\n  @media screen and (max-width: 768px) {\n    font-size: 28px;\n  }\n`;\nexport const Filter = styled.p`\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 129%;\n  color: #8a8a89;\n  margin-bottom: 8px;\n  @media screen and (max-width: 480px) {\n    font-size: 30px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport Card from '../Card/Card';\nimport {\n  Container,\n  Filter,\n  PsychologistsListButton,\n  PsychologistsListSelect,\n} from './PsychologistsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getPsychologist,\n  getPsychologistSort,\n  updateArray,\n} from '../redux/operetion';\n\nconst PsychologistsList = () => {\n  const dispatch = useDispatch();\n  const [page, setPage] = useState(3);\n  const [sortPsych, setSortPsych] = useState(false);\n  const [sortArrayPsych, setSortArrayPsych] = useState([]);\n  const psychArray = useSelector(state => state.psychologists);\n  const psychSortArray = useSelector(state => state.psychologistsSort);\n\n  useEffect(() => {\n    if (psychSortArray.length > 0) {\n      const firstThreeElements = psychSortArray.slice(0, page);\n      console.log(firstThreeElements);\n      setSortArrayPsych(firstThreeElements);\n    }\n  }, [page, psychSortArray]);\n\n  useEffect(() => {\n    if (sortPsych) {\n      return;\n    }\n    if (!sortPsych) {\n      dispatch(updateArray());\n    }\n\n    dispatch(getPsychologist(page));\n  }, [dispatch, page, sortPsych]);\n\n  const addPage = () => {\n    setPage(prev => prev + 3);\n  };\n  const handleOptionChange = event => {\n    const selectedValue = event.target.value;\n    setPage(3);\n    setSortPsych(true);\n    dispatch(getPsychologistSort(selectedValue));\n  };\n\n  return (\n    <Container>\n      <Filter>Filters</Filter>\n      <PsychologistsListSelect onChange={handleOptionChange}>\n        <option>Show all</option>\n        <option>A to Z</option>\n        <option>Z to A</option>\n        <option>Less than 10$</option>\n        <option>Greater than 10$</option>\n        <option>Popular</option>\n        <option>Not popular</option>\n      </PsychologistsListSelect>\n      {<Card array={sortPsych ? sortArrayPsych : psychArray} />}\n      {/* {sortArrayPsych.length > 0 ? (\n        <PsychologistsListButton onClick={sortLoadMore}>\n          Load more\n        </PsychologistsListButton>\n      ) : ( */}\n      <PsychologistsListButton onClick={addPage}>\n        Load more\n      </PsychologistsListButton>\n      {/* )} */}\n    </Container>\n  );\n};\nexport default PsychologistsList;\n"],"names":["_ref","array","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","clicks","setClicks","_useState3","_useState4","favorites","setFavorites","useEffect","getToken","JSON","parse","localStorage","getItem","length","storedFavorites","addToFavorite","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","name","value","updatedFavorites","index","_context","prev","next","getUserToToken","sent","console","log","payload","toast","abrupt","_toConsumableArray","indexOf","splice","removeFavoriteItem","push","addFavorite","setItem","stringify","stop","_x","apply","arguments","_jsxs","_Fragment","children","_jsx","ToastContainer","toastStyle","background","color","UlList","map","el","List","OnlineD","Online","width","height","href","concat","sprite","CardImg","src","avatar_url","alt","CardInformation","Rating","PsychP","RatingDiv","RatingP","rating","Price","PriceSpan","price_per_hour","FavButton","onClick","PName","includes","Name","ExperienceDiv","ExperienceContainer","Experience","ExperienceSpan","experience","license","specialization","initial_consultation","About","about","ReadMe","prevClicks","_objectSpread","_defineProperty","handleClick","ReadMeButton","reviews","doctor","Container","styled","_templateObject","_taggedTemplateLiteral","PsychologistsListSelect","_templateObject2","PsychologistsListButton","_templateObject3","Filter","_templateObject4","page","setPage","sortPsych","setSortPsych","_useState5","_useState6","sortArrayPsych","setSortArrayPsych","psychArray","useSelector","state","psychologists","psychSortArray","psychologistsSort","firstThreeElements","slice","updateArray","getPsychologist","onChange","event","selectedValue","target","getPsychologistSort","Card"],"sourceRoot":""}